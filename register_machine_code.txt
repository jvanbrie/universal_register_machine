Register Machine Code

inc r k (* increment r and goto k *)
dec r k l (* if r > 0 decrement and goto k, else goto l *)
halt

# registers A,B,C will be used for holding information relevant to the macros

copy r s k
dec r 1 3
inc A 2
inc s 0
dec A 4 k
inc r 3

copy r s k (* copy from r to s, goto k *)
0 dec r 1 3
1 inc macro_copy_temp 2
2 inc s 0
3 dec macro_copy_temp 4 k
4 inc r 3

dest_copy r s k (* copy from r to s, destructively, goto k *)
0 dec r 1 k
1 inc s 0

zero r k l (* if r = 0 goto k else goto l *)
0 dec r 1 k
1 inc r l

pop r s k (* r is a seq, place r[0] in s, r[1:] in r, goto k *)
0 dec r  1  3
1 dec r  2  5
2 inc A  0
# A contains r / 2, r was even
3 inc s 5
4 dest_copy A r 0
# B contains log(original r)
# x = B, y = A from seq formula
5 dest_copy A r k

pop r s k
zero r k 1
dec r 2 4
dec r 3 6
inc A 1
inc s 5
dest_copy A r 1
dest_copy A r k

read r t s k (* place tth element of r into s, goto k *)
copy r mac_read_r 1
dec t 2 7
dec mac_read_r 3 5
dec mac_read_r 4 6
inc mac_read_temp 2
dest_copy mac_read_temp mac_read_r 2
dest_copy mac_read_temp mac_read_r 1
pop mac_read_r s k


4 dec Y  5  8
5 inc Y  6
6 dec Y  7  0
7 inc X  6

8 halt

push r s k (multiply r by 2 and add 1, then multiply by 2^s)
0 dec r 1 3
1 inc mac_pair_A 2
2 inc mac_pair_A 0
3 inc mac_pair_A 4
4 dec s 5 6
5 mult_2 mac_pair_A 4
6 dest_copy mac_pair_A r k



write r t s k (* replace the tth element of r with s *)
0  dec t 1 4
1  pop r mac_write_A 2
2  push mac_write_seq mac_write_A 3
3  dec mac_write_A 4 0
4  pop r mac_write_A 5
5  push r s 6
6  zero mac_write_seq 7 k
7  pop mac_write_seq mac_write_A 8
8  push r mac_write_A 6

dec t 1 4 
pop r mac_write_A 2 
push mac_write_seq mac_write_A 3 
dec mac_write_A 4 0 
pop r mac_write_A 5 
push r s 6 
zero mac_write_seq 7 k 
pop mac_write_seq mac_write_A 8 
push r mac_write_A 6 

Universal register machine:

copy E R 1 
write R p x 2 
read E p I 3 
pop I r 4 
zero I 13 5 
pop I p 6 
read R r x 7 
zero I 8 9 
inc x 12 
zero x 10 11 
pop I p 2 
dec x 12 12 
write R r x 2 
halt




